# Build stage
FROM node:20-alpine AS builder
WORKDIR /app
COPY package.json package-lock.json ./
## Ensure dev deps (vite) are installed even if NODE_ENV=production is injected
RUN --mount=type=cache,target=/root/.npm npm ci --include=dev
COPY . .
## Defensive: some tarballs/SCMs lose +x on .bin symlinks â†’ "vite: Permission denied"
RUN chmod -R +x node_modules/.bin || true && chmod +x node_modules/vite/bin/vite.js || true
## Structured build log (keeps with our JSON-first, auditable logs)
RUN node -e 'const vite=require("./node_modules/vite/package.json");const pkg=require("./package.json");console.log(JSON.stringify({event:"frontend_build_env",node:process.version,npm:process.env.npm_config_user_agent||"",vite:vite.version,app:pkg.name,timestamp:new Date().toISOString()}))'
## Call vite via node to bypass any leftover exec-bit/shell edge cases
RUN node node_modules/vite/bin/vite.js build

# Serve stage
FROM nginx:stable-alpine
COPY --from=builder /app/dist /usr/share/nginx/html
COPY ./nginx.conf /etc/nginx/conf.d/default.conf

EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]
