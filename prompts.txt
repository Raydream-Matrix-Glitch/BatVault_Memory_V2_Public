#### 1. Core Packages

You’re an expert in our Python/FastAPI + ArangoDB memory system. You have:

1. The requirements-to-test mapping: `milestone_reqs_to_test_map.md`
2. The code in:
   - `packages/core_config/src/core_config/`
   - `packages/core_logging/src/core_logging/`
   - `packages/core_models/src/core_models/`
   - `packages/core_storage/src/core_storage/`
   - `packages/core_utils/src/core_utils/`
   - `packages/core_validator/src/core_validator/`
   - `packages/link_utils/src/link_utils/`
3. The relevant test suites under `tests/unit/packages/...`

**Task for “Core Packages”**
1. Parse the mapping doc to see which Milestone 1–3 requirements apply to core packages.
2. For each requirement:
   - Confirm the code implements it (✅/⚠️/❌).
   - Confirm the listed tests actually exercise it.
3. Spot missing/partial implementations, test mismatches, dead code, import errors, lint issues.
4. Verify that public APIs and signatures are consistent across packages and match client imports.
5. Generate unified-diff patches for code fixes, test stubs/fixes, or cleanup.
6. Summarize with:
   - A checklist table (Requirement → Status → File paths).
   - “Issues & Gaps” bullets.
   - Patches in `diff --git a/... b/...` format.

Own this entire folder audit and patch work. Next up: Ingest.
```

---

#### 2. Ingest Service

You’re an expert in our Python/FastAPI + ArangoDB memory system. You have:

1. The requirements-to-test mapping: `milestone_reqs_to_test_map.md`
2. The code in `services/ingest/src/ingest/` (all .py files in that folder)
3. The full test suite under `tests/unit/services/ingest/`

**Task for “Ingest”**
1. Parse the mapping doc to see which Milestone 1–3 requirements apply to Ingest.
2. For each requirement:
   - Confirm the code implements it (✅/⚠️/❌).
   - Confirm the listed tests actually exercise it.
3. Look for any:
   - Missing or partial implementations.
   - Test-to-code mismatches (tests that don’t hit their claimed code).
   - Dead code, import errors, lint issues, or logical inconsistencies.
4. Verify imports and API usage from Core Packages (signatures, return types, side-effects).
5. Generate unified-diff patches for:
   - Any missing implementation.
   - Test stubs or fixes for incomplete tests.
   - Cleanup of dead or broken code.
6. Summarize with:
   - A checklist table (Requirement → Status → File paths).
   - “Issues & Gaps” bullets.
   - Patches in `diff --git a/... b/...` format.

Own this entire folder audit and patch work. Next up: Memory API.
```

---

#### 3. Memory API Service

You’re an expert in our Python/FastAPI + ArangoDB memory system. You have:

1. The requirements-to-test mapping: `milestone_reqs_to_test_map.md`
2. The code in `services/memory_api/src/memory_api/` (all .py files in that folder)
3. The full test suite under `tests/unit/services/memory_api/`

**Task for “Memory API”**
1. Parse the mapping doc to see which Milestone 1–3 requirements apply to Memory API.
2. For each requirement:
   - Confirm the code implements it (✅/⚠️/❌).
   - Confirm the listed tests actually exercise it.
3. Look for any:
   - Missing or partial implementations.
   - Test-to-code mismatches.
   - Dead code, import errors, lint issues, or logical inconsistencies.
4. Verify imports and API usage from Ingest and Core Packages.
5. Generate unified-diff patches for missing code, test stubs/fixes, or cleanup.
6. Summarize with:
   - A checklist table (Requirement → Status → File paths).
   - “Issues & Gaps” bullets.
   - Patches in `diff --git a/... b/...` format.

Own the audit and patch generation—no follow-up questions needed. Next up: API Edge.
```

---

#### 4. API Edge Service

You’re an expert in our Python/FastAPI + ArangoDB memory system. You have:

1. The requirements-to-test mapping: `milestone_reqs_to_test_map.md`
2. The code in `services/api_edge/src/api_edge/` (all .py files)
3. The full test suite under `tests/unit/services/api_edge/`

**Task for “API Edge”**
1. Parse the mapping doc to see which Milestone 1–3 requirements apply to API Edge.
2. For each requirement:
   - Confirm the code implements it (✅/⚠️/❌).
   - Confirm the listed tests actually exercise it.
3. Spot missing or partial features, test mismatches, dead/import-error code, lint issues.
4. Verify imports and API usage from Memory API and Core Packages.
5. Generate unified-diff patches for fixes (code, tests, cleanup).
6. Summarize with:
   - A checklist table (Requirement → Status → File paths).
   - “Issues & Gaps” bullets.
   - Patches in `diff --git a/... b/...` format.

Own this entire folder audit and patch work. Next up: Gateway.
```

---

#### 5. Gateway Service

You’re an expert in our Python/FastAPI + ArangoDB memory system. You have:

1. The requirements-to-test mapping: `milestone_reqs_to_test_map.md`
2. The code in `services/gateway/src/gateway/` (all .py files, including subfolders)
3. The full test suite under `tests/unit/services/gateway/`

**Task for “Gateway”**
1. Parse the mapping doc to see which Milestone 1–3 requirements apply to Gateway.
2. For each requirement:
   - Confirm the code implements it (✅/⚠️/❌).
   - Confirm the listed tests actually exercise it.
3. Spot missing/partial features, test mismatches, dead code, import errors, lint issues.
4. Verify imports and API usage from API Edge, Memory API, and Core Packages.
5. Generate unified-diff patches for code fixes, test stubs/fixes, or cleanup.
6. Summarize with:
   - A checklist table (Requirement → Status → File paths).
   - “Issues & Gaps” bullets.
   - Patches in `diff --git a/... b/...` format.

Own this entire folder audit and patch work. Next up: Performance & Integration.
```

---

#### 6. Performance & Integration

You’re an expert in our Python/FastAPI + ArangoDB memory system. You have:

1. The requirements-to-test mapping: `milestone_reqs_to_test_map.md`
2. The performance tests under `tests/performance/`
3. The integration/ops tests under `tests/integration/` and `tests/ops/`

**Task for “Performance & Integration”**
1. Parse the mapping doc for any NFR/performance/integration requirements.
2. For each:
   - Confirm tests exist and align with budgets/targets (✅/⚠️/❌).
   - Spot gaps (missing performance checks, integration flows, vector-index bootstrap).
3. Spot dead tests, import errors, lint issues, or misconfigured test harnesses.
4. Generate unified-diff patches to add missing tests or fix broken ones.
5. Summarize with:
   - A checklist table (Requirement → Status → File paths).
   - “Issues & Gaps” bullets.
   - Patches in `diff --git a/... b/...` format.

Own this final audit pass. Once complete, we’ll have full Milestone 3 readiness.
```
