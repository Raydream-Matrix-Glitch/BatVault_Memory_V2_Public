# syntax = docker/dockerfile:1.4
################################################################################
# STAGE 1 — builder: install OS build deps + Python wheels once
################################################################################
FROM python:3.11-slim AS builder

ARG SERVICE_NAME

ENV PIP_DISABLE_PIP_VERSION_CHECK=1 \
    PIP_NO_COLOR=1 \
    PIP_ROOT_USER_ACTION=ignore

# Only builder gets compilers; runtime stays slim.
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt/lists,sharing=locked \
    apt-get update \
 && apt-get install -y --no-install-recommends build-essential libffi-dev python3-dev libgmp-dev curl \
 && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Install external runtime deps first so they stay cached when code changes.
# We copy just the requirements file(s) to maximize cache hits.
COPY requirements/runtime.txt ./requirements/runtime.txt

RUN --mount=type=cache,target=/root/.cache/pip \
    pip install --upgrade pip wheel setuptools \
 && pip install --cache-dir=/root/.cache/pip -r ./requirements/runtime.txt

# Copy source after deps so changing code doesn't trigger heavy downloads.
COPY packages ./packages
COPY services ./services

# Optional: if any service truly needs console_scripts, switch to editable installs without deps:
# RUN pip install --no-deps -e packages/core_config -e packages/core_logging -e packages/core_metrics -e packages/core_storage -e packages/shared

################################################################################
# STAGE 2 — runtime: small image + non-root user; copy in site-packages & code
################################################################################
FROM python:3.11-slim AS runtime

# Minimal runtime OS libs only.
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt/lists,sharing=locked \
    apt-get update \
 && apt-get install -y --no-install-recommends libffi-dev libgmp-dev curl \
 && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy the interpreter's stdlib + site-packages with installed external deps.
# (Keeps rebuilds fast; code changes won't re-run pip.)
COPY --from=builder /usr/local/lib/python3.11 /usr/local/lib/python3.11

# Copy code (shared packages + all services) — light layers you can invalidate freely.
COPY sitecustomize.py ./sitecustomize.py
COPY --from=builder /app/packages ./packages
COPY --from=builder /app/services ./services

# Create and drop to an unprivileged user after files are in place.
RUN useradd -m -u 10001 appuser && chown -R appuser:appuser /app
USER appuser

# Import local modules without installing them.
# Import local modules without installing them.
# Also include the current service's src folder so `python -m <svc>.__main__`
# works consistently for all src-layout services.
# Make all service packages importable from one shared image.
ENV PYTHONPATH="/app:/app/packages:/app/services/api_edge/src:/app/services/gateway/src:/app/services/ingest/src:/app/services/memory_api/src:/app/services"

# -------- metrics ----------------------------------------------------------
# Prometheus reader for OTEL metrics (harmless locally without a collector)
ENV OTEL_METRICS_EXPORTER=prometheus

# Expose health-port from your ENV
HEALTHCHECK --interval=30s --timeout=5s --retries=5 \
  CMD curl -fsS http://localhost:${BATVAULT_HEALTH_PORT}/readyz || \
      curl -fsS http://localhost:${BATVAULT_HEALTH_PORT}/healthz || exit 1

# Final entrypoint / CMD is provided per-service (compose/k8s)
