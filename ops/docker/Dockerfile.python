# syntax = docker/dockerfile:1.4
################################################################################
# ─── STAGE 1: BUILD HEAVY WHEELS & EDITABLE PACKAGES ──────────────────────────
################################################################################
FROM python:3.11-slim AS builder
ARG SERVICE_NAME

# 1. Install system deps needed for wheel builds
RUN apt-get update \
 && apt-get install -y --no-install-recommends \
      build-essential curl \
 && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# 2. Copy only requirements to cache heavy deps
COPY requirements/runtime.txt ./requirements/runtime.txt

#    – mount pip cache so wheels are kept across builds
RUN --mount=type=cache,target=/root/.cache/pip \
    pip install --upgrade pip wheel setuptools \
 && pip install --cache-dir=/root/.cache/pip \
      --no-deps -r ./requirements/runtime.txt

# 3. Copy shared packages and install editable (fast)
COPY packages/ ./packages/
RUN --mount=type=cache,target=/root/.cache/pip \
    pip install --no-deps \
      -e packages/core_config \
      -e packages/core_logging \
      -e packages/core_models \
      -e packages/core_utils \
      -e packages/link_utils \
      -e packages/core_storage \
      -e packages/core_metrics \
      -e packages/core_validator

# 4. Copy service code and install its extras if requested
COPY services/ ./services/
RUN --mount=type=cache,target=/root/.cache/pip \
    if [ -n "$SERVICE_NAME" ]; then \
      pip install --no-cache-dir -e "/app/services/${SERVICE_NAME}"; \
    fi

################################################################################
# ─── STAGE 2: FINAL RUNTIME IMAGE ──────────────────────────────────────────────
################################################################################
FROM python:3.11-slim
ARG SERVICE_NAME

# Carry over the non-root user
RUN useradd -ms /bin/bash appuser
USER appuser
WORKDIR /app

# Copy everything from builder
COPY --from=builder --chown=appuser:appuser /usr/local/lib/python3.11 /usr/local/lib/python3.11
COPY --from=builder --chown=appuser:appuser /app/packages    ./packages
COPY --from=builder --chown=appuser:appuser /app/services    ./services

# -------- metrics ----------------------------------------------------------
# Make the OTEL SDK publish metrics via the Prometheus reader.  This is
# harmless when a service is launched locally without the collector.
ENV OTEL_METRICS_EXPORTER=prometheus

# Expose health-port from your ENV
HEALTHCHECK --interval=30s --timeout=5s --retries=5 \
  CMD curl -fsS http://localhost:${BATVAULT_HEALTH_PORT:-8080}/healthz || exit 1

# Final entrypoint / CMD is provided per-service
